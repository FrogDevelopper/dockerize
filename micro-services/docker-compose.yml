version: "3.7"

services:

  # tools
  postgres:
    container_name: pgroonga
    image: groonga/pgroonga:2.2.2-alpine-12-slim
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 9173:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  # support
  service-registry:
    container_name: service-registry
    image: frogdevelopment/service-registry:1.0.1-SNAPSHOT
    volumes:
      - /tmp/service-registry:/tmp
      - logs:/var/log
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}

  service-administration:
    container_name: service-administration
    image: frogdevelopment/service-administration:feature_security
    expose:
      - 8080
    volumes:
      - /tmp/service-administration:/tmp
      - logs:/var/log
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-registry
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      VIRTUAL_HOST: boot-admin.frog-development.com
      LETSENCRYPT_HOST: boot-admin.frog-development.com
      LETSENCRYPT_EMAIL: frog-development-it@gmail.com
      WEBHOOK_URL: ${WEBHOOK_URL}
      SBA_USER: $SBA_USER
      SBA_PASSWORD: $SBA_PASSWORD

  service-config:
    container_name: service-config
    image: frogdevelopment/service-config:1.0.1-SNAPSHOT
    volumes:
      - /tmp/service-config:/tmp
      - logs:/var/log
      - /root/.ssh:/root/.ssh
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-registry
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},git
      GIT_URI: ${GIT_URI}
      GIT_LABEL: ${GIT_LABEL}

  service-gateway:
    container_name: service-gateway
    image: frogdevelopment/service-gateway:master
    expose:
      - 8080
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    volumes:
      - /tmp/service-gateway:/tmp
      - logs:/var/log
    restart: always
    depends_on:
      - service-registry
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SIGNING_KEY: ${JWT_SIGNING_KEY}
      VIRTUAL_HOST: gateway.frog-development.com
      LETSENCRYPT_HOST: gateway.frog-development.com
      LETSENCRYPT_EMAIL: frog-development-it@gmail.com

  # services
  authentication-service:
    container_name: authentication-service
    image: frogdevelopment/authentication-service:fix_authentication
    volumes:
      - /tmp/authentication-service:/tmp
      - logs:/var/log
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-config
      - service-registry
      - service-gateway
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
      SIGNING_KEY: ${JWT_SIGNING_KEY}
      DB_USER: ${DB_PASSWORD}
      DB_PASSWORD: ${DB_PASSWORD}

  nihongo-dico-entries-service:
    container_name: nihongo-dico-entries-service
    image: frogdevelopment/nihongo-dico-entries-service:feature_export
    volumes:
      - /tmp/nihongo-dico-entries-service:/tmp
      - logs:/var/log
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-config
      - service-registry
      - service-gateway
      - authentication-service
      - postgres
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
      SIGNING_KEY: ${JWT_SIGNING_KEY}
      DB_USER: ${DB_PASSWORD}
      DB_PASSWORD: ${DB_PASSWORD}

  nihongo-dico-sentences-service:
    container_name: nihongo-dico-sentences-service
    image: frogdevelopment/nihongo-dico-sentences-service:feature_export
    volumes:
      - /tmp/nihongo-dico-sentences-service:/tmp
      - logs:/var/log
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-config
      - service-registry
      - service-gateway
      - authentication-service
      - postgres
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
      SIGNING_KEY: ${JWT_SIGNING_KEY}
      DB_USER: ${DB_PASSWORD}
      DB_PASSWORD: ${DB_PASSWORD}

  nihongo-lessons-service:
    container_name: nihongo-lessons-service
    image: frogdevelopment/nihongo-lessons-service:feat_update
    volumes:
      - logs:/var/log
    restart: always
    healthcheck:
      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-config
      - service-registry
      - service-gateway
      - authentication-service
      - postgres
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
      SIGNING_KEY: ${JWT_SIGNING_KEY}
      DB_USER: ${DB_PASSWORD}
      DB_PASSWORD: ${DB_PASSWORD}

  nihongo-lesson-migrate-service:
    container_name: nihongo-lesson-migrate-service
    image: frogdevelopment/nihongo-lesson-migrate-service:master
    volumes:
      - logs:/var/log
    depends_on:
      - nihongo-lessons-service
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres

  #  book-search-service:
  #    container_name: book-search-service
  #    image: frogdevelopment/book-search-service:master
  #    volumes:
  #      - logs:/var/log
  #    restart: always
  #    depends_on:
  #      - service-registry
  #    environment:
  #      TZ: ${TIME_ZONE}
  #      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
  #      SIGNING_KEY: ${JWT_SIGNING_KEY}

  nihongo-dico-web:
    container_name: nihongo-dico-web
    image: frogdevelopment/nihongo-dico-web:master
    expose:
      - 80
    restart: always
    depends_on:
      - service-gateway
      - nihongo-dico-entries-service
      - nihongo-dico-sentences-service
    environment:
      VIRTUAL_HOST: www.nihongo-dico.frog-development.com
      LETSENCRYPT_HOST: www.nihongo-dico.frog-development.com
      LETSENCRYPT_EMAIL: frog-development-it@gmail.com

#  frog-manager-web:
#    container_name: frog-manager-web
#    image: frogdevelopment/frog-manager-web:master
#    expose:
#      - 80
#    restart: always
#    depends_on:
#      - service-gateway
#    environment:
#      VIRTUAL_HOST: manager.frog-development.com
#      LETSENCRYPT_HOST: manager.frog-development.com
#      LETSENCRYPT_EMAIL: frog-development-it@gmail.com

#  postgres:
#    container_name: postgres
#    image: postgres:11.4-alpine
#    restart: always
#    expose:
#      - 5432
#    ports:
#      - 5432:5432
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

volumes:
  postgres_data:
  logs:

networks:
  default:
    name: frog_ms
