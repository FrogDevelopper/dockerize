version: "3.7"

services:

  # tools
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine-0.7.0
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.size == small
    ports:
      - 80:80
      - 443:443
    networks:
      - pond
    volumes:
      - dhparam:/etc/nginx/dhparam
      - certs:/etc/nginx/certs:ro
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    logging:
      options:
        max-size: "50k"
        max-file: "2"

  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion:v1.12
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.size == small
    depends_on:
      - nginx-proxy
    networks:
      - pond
    volumes:
      - certs:/etc/nginx/certs:rw
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      options:
        max-size: "50k"
        max-file: "2"

  postgres:
    image: groonga/pgroonga:2.2.2-alpine-12-slim
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.size == large
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 9173:5432
    networks:
      - pond
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  # support
  service-registry:
    image: frogdevelopment/service-registry:master
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.size == small
    healthcheck:
      #      test: ["CMD", "curl", "--fail", "--silent", "${FROG_ADMIN_USER}:${FROG_ADMIN_PWD}@localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      test: ["CMD", "curl", "${FROG_ADMIN_USER}:${FROG_ADMIN_PWD}@localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - 8761:8080
    networks:
      - pond
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

  service-administration:
    image: frogdevelopment/service-administration:master
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.size == large
    healthcheck:
      test: ["CMD", "curl", "${FROG_ADMIN_USER}:${FROG_ADMIN_PWD}@localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      - service-registry
    ports:
      - 8080:8080
    networks:
      - pond
    environment:
      TZ: ${TIME_ZONE}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      VIRTUAL_HOST: boot-admin.frog-development.com
      LETSENCRYPT_HOST: boot-admin.frog-development.com
      LETSENCRYPT_EMAIL: frog-development-it@gmail.com
      WEBHOOK_URL: ${WEBHOOK_URL}
      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

  #  service-config:
  #    image: frogdevelopment/service-config:master
  #    deploy:
  #        mode: replicated
  #        replicas: 1
  #        placement:
  #          constraints:
  #            - node.labels.size == large
  #    volumes:
  #      - /root/.ssh:/root/.ssh
  #    healthcheck:
  #      test: ["CMD", "curl", "${FROG_ADMIN_USER}:${FROG_ADMIN_PWD}@localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
  #      interval: 20s
  #      timeout: 5s
  #      retries: 5
  #      start_period: 40s
  #    depends_on:
  #      - service-registry
  #    environment:
  #      TZ: ${TIME_ZONE}
  #      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},git
  #      GIT_URI: ${GIT_URI}
  #      GIT_LABEL: ${GIT_LABEL}
  #      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
  #      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

  #  service-gateway:
  #    image: frogdevelopment/service-gateway:master
  #    deploy:
  #        mode: replicated
  #        replicas: 1
  #        placement:
  #          constraints:
  #            - node.labels.size == large
  #    expose:
  #      - 8080
  #    healthcheck:
  #      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
  #      interval: 20s
  #      timeout: 5s
  #      retries: 5
  #      start_period: 40s
  #    depends_on:
  #      - service-registry
  #    environment:
  #      TZ: ${TIME_ZONE}
  #      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
  #      SIGNING_KEY: ${JWT_SIGNING_KEY}
  #      VIRTUAL_HOST: gateway.frog-development.com
  #      LETSENCRYPT_HOST: gateway.frog-development.com
  #      LETSENCRYPT_EMAIL: frog-development-it@gmail.com
  #      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
  #      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

  # services
#  authentication-service:
#    image: frogdevelopment/authentication-service:master
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == large
#    healthcheck:
#      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
#      interval: 20s
#      timeout: 5s
#      retries: 5
#      start_period: 40s
#    depends_on:
#      - service-config
#      - service-registry
#      - service-gateway
#    environment:
#      TZ: ${TIME_ZONE}
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
#      SIGNING_KEY: ${JWT_SIGNING_KEY}
#      DB_USER: ${POSTGRES_USER}
#      DB_PASSWORD: ${POSTGRES_PASSWORD}
#      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
#      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

#  nihongo-dico-entries-service:
#    image: frogdevelopment/nihongo-dico-entries-service:master
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == large
#    healthcheck:
#      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
#      interval: 20s
#      timeout: 5s
#      retries: 5
#      start_period: 40s
#    depends_on:
#      - service-config
#      - service-registry
#      - service-gateway
#      - authentication-service
#      - postgres
#    environment:
#      TZ: ${TIME_ZONE}
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
#      SIGNING_KEY: ${JWT_SIGNING_KEY}
#      DB_USER: ${POSTGRES_USER}
#      DB_PASSWORD: ${POSTGRES_PASSWORD}
#      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
#      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

#  nihongo-dico-sentences-service:
#    image: frogdevelopment/nihongo-dico-sentences-service:master
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == large
#    healthcheck:
#      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
#      interval: 20s
#      timeout: 5s
#      retries: 5
#      start_period: 40s
#    depends_on:
#      - service-config
#      - service-registry
#      - service-gateway
#      - authentication-service
#      - postgres
#    environment:
#      TZ: ${TIME_ZONE}
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
#      SIGNING_KEY: ${JWT_SIGNING_KEY}
#      DB_USER: ${POSTGRES_USER}
#      DB_PASSWORD: ${POSTGRES_PASSWORD}
#      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
#      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

#  nihongo-lessons-service:
#    image: frogdevelopment/nihongo-lessons-service:master
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == large
#    healthcheck:
#      test: ["CMD", "curl", "localhost:8081/actuator/health 2>&1 | grep UP || exit 1"]
#      interval: 20s
#      timeout: 5s
#      retries: 5
#      start_period: 40s
#    depends_on:
#      - service-config
#      - service-registry
#      - service-gateway
#      - authentication-service
#      - postgres
#    environment:
#      TZ: ${TIME_ZONE}
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
#      SIGNING_KEY: ${JWT_SIGNING_KEY}
#      DB_USER: ${POSTGRES_USER}
#      DB_PASSWORD: ${POSTGRES_PASSWORD}
#      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
#      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

#  nihongo-lesson-migrate-service:
#    image: frogdevelopment/nihongo-lesson-migrate-service:master
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == large
#    depends_on:
#      - nihongo-lessons-service
#    environment:
#      TZ: ${TIME_ZONE}
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
#      DB_USER: ${POSTGRES_USER}
#      DB_PASSWORD: ${POSTGRES_PASSWORD}
#      FROG_ADMIN_USER: ${FROG_ADMIN_USER}
#      FROG_ADMIN_PWD: ${FROG_ADMIN_PWD}

#  book-search-service:
#    image: frogdevelopment/book-search-service:master
#    volumes:
#      - logs:/var/log
#    restart: always
#    depends_on:
#      - service-registry
#    environment:
#      TZ: ${TIME_ZONE}
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE},postgres
#      SIGNING_KEY: ${JWT_SIGNING_KEY}

#  nihongo-dico-web:
#    image: frogdevelopment/nihongo-dico-web:latest
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == small
#    expose:
#      - 80
#    depends_on:
#      - service-gateway
#      - nihongo-dico-entries-service
#      - nihongo-dico-sentences-service
#    environment:
#      VIRTUAL_HOST: www.nihongo-dico.frog-development.com
#      LETSENCRYPT_HOST: www.nihongo-dico.frog-development.com
#      LETSENCRYPT_EMAIL: frog-development-it@gmail.com

#  frog-manager-web:
#    image: frogdevelopment/frog-manager-web:latest
#    deploy:
#        mode: replicated
#        replicas: 1
#        placement:
#          constraints:
#            - node.labels.size == small
#    expose:
#      - 80
#    depends_on:
#      - service-gateway
#      - nihongo-dico-entries-service
#      - nihongo-dico-sentences-service
#      - nihongo-lessons-service
#    environment:
#      VIRTUAL_HOST: manager.frog-development.com
#      LETSENCRYPT_HOST: manager.frog-development.com
#      LETSENCRYPT_EMAIL: frog-development-it@gmail.com

#  postgres:
#    container_name: postgres
#    image: postgres:11.4-alpine
#    restart: always
#    expose:
#      - 5432
#    ports:
#      - 5432:5432
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

volumes:
  postgres_data:
  dhparam:
  vhost:
  html:
  certs:

networks:
  pond:
    driver: overlay
    name: pond
